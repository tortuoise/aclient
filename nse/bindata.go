// Code generated by go-bindata.
// sources:
// static/nse_hols
// static/nse_prtfl
// DO NOT EDIT!

package nse

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _staticNse_hols = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x32\x32\xf3\x4a\xcc\x33\x32\x30\xb4\xe0\x32\x34\x76\x4b\x4d\x02\xb3\x0c\x8c\x7c\x13\x8b\xc0\x2c\x23\x4b\x18\xcb\xd8\x00\xc6\x32\x30\xf4\x4d\xac\x84\xe8\x30\x75\x2c\x4d\x87\xa8\x33\x82\xb1\x0c\x8d\x83\x53\x0b\x20\x62\x06\x30\x96\x81\x91\x7f\x72\x09\x44\xd6\x02\xc6\x32\x30\xf7\xcb\x2f\x83\xb0\x2c\x60\x2c\x23\x63\x38\xcb\xd4\x25\x35\x19\xcc\x02\x04\x00\x00\xff\xff\xc9\xf1\xd6\x55\xa0\x00\x00\x00")

func staticNse_holsBytes() ([]byte, error) {
	return bindataRead(
		_staticNse_hols,
		"static/nse_hols",
	)
}

func staticNse_hols() (*asset, error) {
	bytes, err := staticNse_holsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "static/nse_hols", size: 160, mode: os.FileMode(436), modTime: time.Unix(1521323390, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _staticNse_prtfl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x2c\x90\x41\xae\x23\x21\x0c\x44\xf7\x75\x90\xd9\xcd\x21\x0a\x43\x1a\xa7\xc1\x20\x63\x92\xc9\xdc\xff\x20\x5f\xdd\xf9\x1b\xf4\xb0\xcb\xb2\xfc\x28\x02\x66\x9a\xce\xe1\xb1\xc0\x9e\xf6\x93\x52\x3a\xb8\x94\x36\xa9\x16\xe0\xf6\x31\x2b\xbd\x13\xfc\xa7\x2b\xd1\x4e\x24\x3e\xf9\xfc\xcb\x1d\x03\xd7\x3f\xd1\x47\x26\x52\xa5\x87\xd2\xa3\x21\xd5\xd2\x90\xc6\x92\xda\x22\x23\x4d\x69\x10\x9d\x8d\x90\xc1\xa6\x96\x95\xc8\xee\x25\xe7\x0f\x8a\x4a\x2d\xde\x47\xe0\xa0\x36\x1c\xce\xa5\x1d\x55\x5a\x14\xa9\xa8\xf9\x21\xf7\x73\xef\xad\x6a\x79\x9b\xb6\x97\x43\x45\x45\xef\xa2\xe6\x42\x5c\x8d\xa5\x96\xd3\x09\xb5\x87\x33\x4a\xbb\xe0\x03\x0d\xc1\x39\x82\xe7\x9d\x6d\x81\xb6\xa7\x1a\xfa\x9f\x8e\x4e\xdf\xa1\xb0\x98\x82\x61\x87\x60\x8e\x77\xf1\xc3\x35\xc3\x4b\x53\x9a\x14\xac\xa4\x86\xb5\xed\xd7\x40\x30\xd8\x47\x0c\x5f\x5f\x0c\xcf\x2f\xbf\xf1\x9e\xbd\x69\x45\x29\x0d\x21\x0b\xd7\x05\x1d\xbb\x85\x5f\x52\x65\xe0\xad\xd3\x07\x3e\xe5\x6b\xf1\xff\x95\xfb\x09\x00\x00\xff\xff\x24\x27\x58\xbd\x83\x01\x00\x00")

func staticNse_prtflBytes() ([]byte, error) {
	return bindataRead(
		_staticNse_prtfl,
		"static/nse_prtfl",
	)
}

func staticNse_prtfl() (*asset, error) {
	bytes, err := staticNse_prtflBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "static/nse_prtfl", size: 387, mode: os.FileMode(436), modTime: time.Unix(1521321080, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"static/nse_hols": staticNse_hols,
	"static/nse_prtfl": staticNse_prtfl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"static": &bintree{nil, map[string]*bintree{
		"nse_hols": &bintree{staticNse_hols, map[string]*bintree{}},
		"nse_prtfl": &bintree{staticNse_prtfl, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

