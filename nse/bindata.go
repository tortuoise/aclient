// Code generated by go-bindata. DO NOT EDIT.
// sources:
// static/nse_hols
// static/nse_prtfl
package nse

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _staticNse_hols = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x32\x32\xf3\x4a\xcc\x33\x32\x30\xb4\xe0\x32\x34\x76\x4b\x4d\x02\xb3\x0c\x8c\x7c\x13\x8b\xc0\x2c\x23\x4b\x18\xcb\xd8\x00\xc6\x32\x30\xf4\x4d\xac\x84\xe8\x30\x75\x2c\x4d\x87\xa8\x33\x82\xb1\x0c\x8d\x83\x53\x0b\x20\x62\x06\x30\x96\x81\x91\x7f\x72\x09\x44\xd6\x02\xc6\x32\x30\xf7\xcb\x2f\x83\xb0\x2c\x60\x2c\x23\x63\x38\xcb\xd4\x25\x35\x19\xcc\x02\x04\x00\x00\xff\xff\xc9\xf1\xd6\x55\xa0\x00\x00\x00")

func staticNse_holsBytes() ([]byte, error) {
	return bindataRead(
		_staticNse_hols,
		"static/nse_hols",
	)
}

func staticNse_hols() (*asset, error) {
	bytes, err := staticNse_holsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "static/nse_hols", size: 160, mode: os.FileMode(420), modTime: time.Unix(1531137921, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _staticNse_prtfl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x2c\x90\x41\xae\x23\x31\x08\x44\xf7\x75\x90\xd9\xcd\x21\xca\xd8\x69\x93\xb6\xb1\x85\x71\x32\x99\xfb\x1f\xe4\xab\x3b\x7f\x83\x1e\xa2\x10\xe2\x51\x04\xcc\x34\x9d\xc3\x63\x81\x3d\xed\x27\xa5\x74\x70\x29\x6d\x52\x2d\xc0\xed\x63\x56\x7a\x27\xf8\x4f\x57\xa2\x9d\x48\x7c\xf2\xf9\x97\x3b\x06\xae\x3e\xd1\x47\x26\x52\xa5\x87\xd2\xa3\x21\xd5\xd2\x90\xc6\x92\xda\x22\x23\x4d\x69\x10\x9d\x8d\x90\xc1\xa6\x96\x95\xc8\xee\x25\xe7\x0f\x8a\x4a\x2d\xde\x47\xe0\xa0\x36\x1c\xce\xa5\x1d\x55\x5a\x14\xa9\xa8\xf9\x21\x77\xb9\xef\x56\xb5\xbc\x4d\xdb\xcb\xa1\x69\xb7\xba\x8e\x87\x1a\x54\x54\xf4\x9e\x6b\x2e\xc4\x95\x59\x6a\x39\x9d\x50\x7b\x38\xa3\xb4\x0b\x3e\xd0\x10\x9c\x23\x78\xde\xd9\x16\x68\x7b\xaa\xa1\xff\xe9\xe8\xf4\x1d\x0a\x8b\x29\x18\x76\x08\xe6\x78\x17\x3f\x5c\x33\xbc\x34\xa5\x49\xc1\x4a\x6a\x58\xdb\x7e\x65\x04\x83\x7d\xc4\xf0\xf5\xc5\xf0\xfc\xf2\x1b\xef\xdd\x9b\x56\x94\xd2\x10\xb2\x70\x3d\xd3\xb1\x5b\xf8\xe5\x57\x06\xde\x3a\x7d\xe0\x53\xbe\x42\xff\x5f\xb9\x9f\x00\x00\x00\xff\xff\xfb\x9f\x07\x6e\x8e\x01\x00\x00")

func staticNse_prtflBytes() ([]byte, error) {
	return bindataRead(
		_staticNse_prtfl,
		"static/nse_prtfl",
	)
}

func staticNse_prtfl() (*asset, error) {
	bytes, err := staticNse_prtflBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "static/nse_prtfl", size: 398, mode: os.FileMode(420), modTime: time.Unix(1538729780, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"static/nse_hols": staticNse_hols,
	"static/nse_prtfl": staticNse_prtfl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"static": &bintree{nil, map[string]*bintree{
		"nse_hols": &bintree{staticNse_hols, map[string]*bintree{}},
		"nse_prtfl": &bintree{staticNse_prtfl, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

